<script setup lang="ts">
import {
  withoutLeadingSlash,
  withoutTrailingSlash,
  withLeadingSlash,
} from 'ufo'
import type { BreadcrumbItem } from '#shared/types'
import { ref, computed, watch, useRoute, useFetch, navigateTo } from '#imports'

import MainContainer from '~/components/layout/MainContainer.vue'
import BlogPostCard from '~/components/blog/BlogPostCard.vue'
import FeaturedBlogPostCard from '~/components/blog/FeaturedBlogPostCard.vue'
import Paginator from '~/components/common/Paginator.vue'
import Header from '~/components/layout/Header.vue'
import Footer from '~/components/layout/Footer.vue'

const route = useRoute()
const queryPage = route.query.page

const currentPage = ref<number>(getCurrentPage())
const hideBreadcrumbs = ref<boolean>(false)

const categoryUri = withoutLeadingSlash(withoutTrailingSlash(route.path))

const { data: blogCategory } = await useFetch('/api/v1/blog/category', {
  method: 'POST',
  body: {
    uri: categoryUri,
  },
})

if (!blogCategory.value) {
  await navigateTo('/404', { redirectCode: 404 })
}

const { data: paginatedBlogPosts } = await useFetch('/api/v1/blog/posts', {
  method: 'POST',
  body: {
    page: currentPage.value,
    categoryUri,
  },
})

if (
  !paginatedBlogPosts.value ||
  paginatedBlogPosts.value.blogPosts.length === 0
) {
  await navigateTo('/404', { redirectCode: 404 })
}

const blogPostsCards = computed(() => {
  return (paginatedBlogPosts.value?.blogPosts || []).map((blogPost) => {
    return {
      title: blogPost.title || '',
      category: blogPost.blogCategories[0]?.title || '',
      categoryLink: withLeadingSlash(
        withoutTrailingSlash(blogPost.blogCategories[0]?.uri || ''),
      ),
      description: blogPost.excerptText || '',
      link: withLeadingSlash(withoutTrailingSlash(blogPost.uri || '')),
      image: blogPost.blogFeaturedImage[0]?.url || '',
      authorImage: '',
      authorName: '',
      date: '',
    }
  })
})

const featuredBlogPost = computed(() => {
  // return the first post if there are no featured posts
  return blogPostsCards.value[0]
})

watch(
  () => currentPage.value,
  async () => {
    await navigateTo({
      path: route.path,
      query: { page: currentPage.value },
    })

    // force a page reload
    window.location.reload()
  },
)

function getCurrentPage(): number {
  if (!queryPage) return 1

  const pageNumber = parseInt(queryPage.toString())
  if (isNaN(pageNumber)) {
    return 1
  } else if (pageNumber < 1) {
    return 1
  } else {
    return pageNumber
  }
}

const breadcrumbs: Array<BreadcrumbItem> = [
  { name: 'Home', href: '/', current: false },
  { name: 'Blog', href: '/blog', current: false },
  {
    name: blogCategory.value?.title || 'Category',
    href: route.fullPath,
    current: true,
  },
]
</script>

<template>
  <div>
    <Header
      :breadcrumbs="breadcrumbs"
      :hide-breadcrumbs="hideBreadcrumbs"
    />
    <main class="py-4">
      <section class="my-16">
        <MainContainer>
          <div class="text-center">
            <div class="relative space-y-10 text-center lg:space-y-0">
              <h1 class="text-4xl leading-tight md:text-5xl">
                {{ blogCategory?.title }}
              </h1>
            </div>
          </div>
        </MainContainer>
      </section>

      <section v-if="featuredBlogPost" class="my-16 py-20 xl:my-24">
        <MainContainer>
          <FeaturedBlogPostCard :article="featuredBlogPost" />
        </MainContainer>
      </section>

      <section class="my-16 lg:my-24">
        <MainContainer>
          <!-- Blog Listing -->
          <div
            class="grid grid-rows-3 gap-x-5 gap-y-16 sm:grid-cols-2 lg:grid-cols-3"
          >
            <BlogPostCard
              v-for="post in blogPostsCards"
              :key="post.title"
              :title="post.title"
              :excerpt="post.description"
              :url="post.link"
              :category="{
                title: post.category,
                url: post.categoryLink,
              }"
            />
          </div>
          <!-- End Blog Listing -->

          <!-- Paginator -->
          <div class="my-24 flex justify-center">
            <Paginator
              v-model="currentPage"
              :total-pages="paginatedBlogPosts?.totalPages || 0"
            />
          </div>
          <!-- End Paginator -->
        </MainContainer>
      </section>
    </main>
    <Footer />
  </div>
</template>
