<script setup lang="ts">
import {
  withoutLeadingSlash,
  withoutTrailingSlash,
  withLeadingSlash,
} from 'ufo'
import BlogPostCard from '~/components/blog/BlogPostCard.vue'
import FeaturedBlogPostCard from '~/components/blog/FeaturedBlogPostCard.vue'
import Paginator from '~/components/common/Paginator.vue'

interface Props {
  title?: string
  channel?: string
  sectionCategories?: string
  categorySlug?: string
  pageSize?: number
}

const props = withDefaults(defineProps<Props>(), {
  title: '',
  categorySlug: undefined,
  channel: 'blog',
  sectionCategories: '',
  pageSize: 9,
})
const route = useRoute()
const queryPage = route.query.page

const currentPage = ref<number>(getCurrentPage())
// Validate channel
const categoryUri = withoutLeadingSlash(
  withoutTrailingSlash(props.categorySlug),
)

const allowedChannels = ['blog']

if (!props.channel || !allowedChannels.includes(props.channel)) {
  throw createError({
    statusCode: 404,
    message: 'Page Not Found',
  })
}

// Fetch blog entries
const { data: blogCategory } = await useFetch('/api/v1/blog/category', {
  method: 'POST',
  body: {
    uri: categoryUri,
  },
})

if (!blogCategory.value && categoryUri !== 'blog') {
  await navigateTo('/404', { redirectCode: 404 })
}

const requestBody = {
  page: currentPage.value,
  ...(categoryUri !== 'blog' && { categoryUri }), // Conditionally add categoryUri if it's not "blog"
}

const { data: paginatedBlogPosts } = await useFetch('/api/v1/blog/posts', {
  method: 'POST',
  body: requestBody,
})

if (
  !paginatedBlogPosts.value ||
  paginatedBlogPosts.value.blogPosts.length === 0
) {
  await navigateTo('/404', { redirectCode: 404 })
}

const blogPostsCards = computed(() => {
  return (paginatedBlogPosts.value?.blogPosts || []).map((blogPost) => {
    return {
      title: blogPost.title || '',
      category: blogPost.blogCategories[0]?.title || '',
      categoryLink: withLeadingSlash(
        withoutTrailingSlash(blogPost.blogCategories[0]?.uri || ''),
      ),
      description: blogPost.excerptText || '',
      link: withLeadingSlash(withoutTrailingSlash(blogPost.uri || '')),
      image: blogPost.blogFeaturedImage[0]?.url || '',
      authorImage: '',
      authorName: '',
      date: '',
    }
  })
})

const mostRecentBlogArticle = computed(() => {
  // return the first post if there are no featured posts
  return blogPostsCards.value[0]
})

watch(
  () => currentPage.value,
  async () => {
    await navigateTo({
      path: route.path,
      query: { page: currentPage.value },
    })

    // force a page reload
    window.location.reload()
  },
)

function getCurrentPage(): number {
  if (!queryPage) return 1

  const pageNumber = parseInt(queryPage.toString())
  if (isNaN(pageNumber)) {
    return 1
  } else if (pageNumber < 1) {
    return 1
  } else {
    return pageNumber
  }
}
</script>

<template>
  <div>
    <!-- Heading Section -->
    <section>
      <div class="my-16 px-6">
        <div class="mx-auto max-w-container">
          <div class="text-center">
            <div class="relative space-y-10 text-center lg:space-y-0">
              <h1 class="text-4xl leading-tight md:text-5xl">
                {{ props.title }}
              </h1>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Blog Content -->
    <div class="my-16 lg:my-24">
      <!-- Featured Article -->
      <FeaturedBlogPostCard
        v-if="mostRecentBlogArticle"
        :article="mostRecentBlogArticle"
      />

      <!-- Blog Listing -->
      <div class="my-16 px-6">
        <div class="mx-auto max-w-container">
          <div class="grid gap-x-5 gap-y-16 sm:grid-cols-2 lg:grid-cols-3">
            <BlogPostCard
              v-for="post in blogPostsCards"
              :key="post.title"
              :title="post.title"
              :excerpt="post.description"
              :url="post.link"
              :category="{
                title: post.category,
                url: post.categoryLink,
              }"
            />
          </div>
        </div>
      </div>
      <!-- Pagination -->
      <div class="my-24 flex justify-center">
        <Paginator
          v-model="currentPage"
          :total-pages="paginatedBlogPosts?.totalPages || 0"
        />
      </div>
    </div>
  </div>
</template>
