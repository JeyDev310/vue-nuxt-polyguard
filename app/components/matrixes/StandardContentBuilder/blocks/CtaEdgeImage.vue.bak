<script setup lang="ts">
import { z } from 'zod'
import { computed } from '#imports'
import type { CtaEdgeImageFieldsFragment } from '~~/server/codegen'

interface Props {
  block?: CtaEdgeImageFieldsFragment | null
}

const props = withDefaults(defineProps<Props>(), {
  block: undefined,
})

const isMediaAsset = (
  asset: unknown,
): asset is { url: string; srcset: string; alt: string } => {
  const assetSchema = z.object({
    url: z.string(),
    srcset: z.string(),
  })

  const result = assetSchema.safeParse(asset)

  return result.success
}

const srcSet = computed(() => {
  if (!props.block?.image[0]) return ''
  if (props.block?.image[0]?.__typename === 'media_Asset') {
    const baseUrl = props.block?.image[0]?.transform_300
    const hiResUrl = props.block?.image[0]?.transform_900

    if (!baseUrl || !hiResUrl) return ''
    return `${baseUrl} 300w, ${hiResUrl} 600w`
  }
  return ''
})
</script>

<template>
  <!-- <div class="relative">{{ props.block?.typeHandle }}</div>
  <div>{{ props.block }}</div> -->
  <section
    class="slider-cta relative bg-primary before:absolute before:inset-0 before:z-10 before:h-full before:w-9/12 before:bg-gradient-to-r before:from-primary-darker before:via-primary-darker after:absolute after:inset-0 after:m-auto after:h-[calc(100%-theme(spacing.4))] after:w-full after:bg-pattern-1 after:opacity-20"
  >
    <div class="relative z-10 px-6">
      <div class="mx-auto max-w-container">
        <div
          class="flex flex-col justify-between space-y-10 md:flex-row md:space-y-0"
        >
          <!-- Text Content Section -->
          <div class="w-full pb-10 pt-20 md:w-5/12 md:pb-20">
            <div class="grid">
              <div>
                <div class="prose-fancy prose prose-invert">
                  <h3
                    v-if="props.block?.primaryText"
                    class="font-medium text-white last:[&>p]:mb-0"
                    v-html="props.block?.primaryText"
                  />
                  <p
                    v-if="props.block?.secondaryText"
                    class="text-white"
                    v-html="props.block?.secondaryText"
                  />
                </div>
              </div>

              <!-- Link Section -->
              <div v-if="props.block?.primaryLink">
                <NuxtLink
                  :to="
                    '/' +
                    (
                      props.block?.primaryLink[0]?.linkUri ??
                      props.block?.primaryLink[0]?.url ??
                      ''
                    ).replace(/^\/+/, '')
                  "
                  class="relative z-10 inline-flex items-center space-x-2.5 sm:px-0"
                  :target="props.block?.primaryLink[0]?.target"
                >
                  <div>
                    <div
                      class="flex h-14 w-14 items-center justify-center rounded-full bg-black text-white transition"
                    >
                      <svg
                        width="18"
                        height="12"
                        viewBox="0 0 18 12"
                        class="fill-current"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M31.4142136,22.3431458 L36.363961,27.2928932 C36.7544853,27.6834175 36.7544853,28.3165825 36.363961,28.7071068 L31.4142136,33.6568542 L30,32.2426407 L33.242,28.9991458 L19,29 L19,27 L33.24,26.9991458 L30,23.7573593 L31.4142136,22.3431458 Z"
                          transform="translate(-532.000000, -799.000000) translate(147.000000, 473.000000) translate(366.000000, 304.000000)"
                          fill="currentColor"
                          fill-rule="evenodd"
                        />
                      </svg>
                    </div>
                  </div>
                  <div class="font-heading text-xs font-medium text-white">
                    {{ props.block?.primaryLink[0]?.linkText }}
                  </div>
                </NuxtLink>
              </div>
            </div>
          </div>

          <!-- Image Section -->
          <div
            v-if="props.block?.image"
            class="relative w-full overflow-hidden md:w-7/12 2xl:w-6/12"
          >
            <div class="left-36 top-9 p-5 md:absolute 2xl:left-24">
              <img
                v-if="isMediaAsset(props.block?.image[0])"
                :src="props.block?.image[0]?.url ?? undefined"
                :data-srcset="srcSet"
                width="300"
                height="392"
                :alt="props.block?.image[0]?.alt ?? undefined"
                class="lazyload lazyload-fade mx-auto -mb-40 drop-shadow-2xl filter md:mx-0 md:mb-0"
                loading="lazy"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</template>
